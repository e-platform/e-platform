<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- 读取配置文件数据 -->
	<bean id="jdbcConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"><value>classpath:jdbc.properties</value></property>
	</bean>
	
	<!-- 数据连接池 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName"><value>${DBCP.DataSource.jdbc.driver}</value></property>
		<property name="url"><value>${DBCP.DataSource.jdbc.url}</value></property>
		<property name="username"><value>${DBCP.DataSource.jdbc.username}</value></property>
		<property name="password"><value>${DBCP.DataSource.jdbc.password}</value></property>
		<property name="maxActive"><value>${DBCP.DataSource.jdbc.maxactive}</value></property>
		<property name="maxIdle"><value>${DBCP.DataSource.jdbc.maxIdle}</value></property>
		<property name="maxWait"><value>${DBCP.DataSource.jdbc.maxwait}</value></property>
	</bean>
	
	<!-- 
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>eshopdb</value></property>
		<property name="resourceRef"><value>false</value></property>
	</bean>
	-->
	
	<!-- sessionFactory -->
	<!-- 注解 begin -->
		
	<!-- 注解end -->


	<!-- xml配置文件 begin -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="mappingResources">
			<list>
				<value>example/user.hbm.xml</value>
				<value>com/sshf/sys/CmtLoginmsgDict.hbm.xml</value>
				<value>com/sshf/sys/CmtLoginoprRd.hbm.xml</value>
				<value>com/sshf/sys/CmtLoginroleRel.hbm.xml</value>
				<value>com/sshf/sys/CmtPopedomDict.hbm.xml</value>
				<value>com/sshf/sys/CmtRoleDict.hbm.xml</value>
				<value>com/sshf/sys/CmtRolepopedomRel.hbm.xml</value>
				<value>com/sshf/sys/CmtTeamDict.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>
	<!-- xml配置文件 end -->

	<!-- hibernate 操作模版 -->
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="cacheQueries">
			<value>true</value>
		</property>
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<!-- 多个bean公用bean代理方式实现事务管理 begin -->
	<bean id="baseTxProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	<!-- 多个bean公用bean代理方式实现事务管理 end -->
	
	<!-- spring 延迟加载问题解决  也可以在web.xml中配置openSessionInViewFilter-->
	<bean id="openSessionInViewInterceptor"
		class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">   
		<property name="interceptors">   
			<list>   
				<ref bean="openSessionInViewInterceptor" />   
			</list>   
		</property>   
		<property name="mappings">   
			<props>   
				<!--  <prop key="main.do">mainFrameController</prop>-->   
			</props>   
		</property>   
	</bean>  

	<!-- 打开注解方式 -->
	<!--  <context:annotation-config/>-->
	<context:component-scan base-package="example" />

	<!-- 支持 @Transactional 标记 -->
	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager"/>
	-->
	<!--  <import resource="com.*"/>-->
</beans>